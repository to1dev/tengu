--- blake2b.c	2025-01-29 16:56:11.000000000 +0100
+++ src/blake2b.c	2025-01-30 01:38:19.394267700 +0100
@@ -78,7 +78,7 @@
 }
 
 /* init xors IV with input parameter block */
-int blake2b_init_param(blake2b_state *S, const blake2b_param *P) {
+int _blake2b_init_param(blake2b_state *S, const blake2b_param *P) {
   const uint8_t *p = (const uint8_t *)(P);
   size_t i = 0;
 
@@ -109,7 +109,7 @@
   memzero(P->reserved, sizeof(P->reserved));
   memzero(P->salt, sizeof(P->salt));
   memzero(P->personal, sizeof(P->personal));
-  return blake2b_init_param(S, P);
+  return _blake2b_init_param(S, P);
 }
 
 int blake2b_InitPersonal(blake2b_state *S, size_t outlen, const void *personal,
@@ -131,7 +131,7 @@
   memzero(P->reserved, sizeof(P->reserved));
   memzero(P->salt, sizeof(P->salt));
   memcpy(P->personal, personal, BLAKE2B_PERSONALBYTES);
-  return blake2b_init_param(S, P);
+  return _blake2b_init_param(S, P);
 }
 
 int blake2b_InitKey(blake2b_state *S, size_t outlen, const void *key,
@@ -155,7 +155,7 @@
   memzero(P->salt, sizeof(P->salt));
   memzero(P->personal, sizeof(P->personal));
 
-  if (blake2b_init_param(S, P) < 0) return -1;
+  if (_blake2b_init_param(S, P) < 0) return -1;
 
   {
     uint8_t block[BLAKE2B_BLOCKBYTES] = {0};
@@ -296,7 +296,7 @@
   return 0;
 }
 
-int blake2b(const uint8_t *msg, uint32_t msg_len, void *out, size_t outlen) {
+int _blake2b(const uint8_t *msg, uint32_t msg_len, void *out, size_t outlen) {
   BLAKE2B_CTX ctx;
   if (0 != blake2b_Init(&ctx, outlen)) return -1;
   if (0 != blake2b_Update(&ctx, msg, msg_len)) return -1;
